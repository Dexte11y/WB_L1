// Реализовать все возможные способы остановки выполнения горутины.

package main

// func worker(stop chan bool) {
// 	for {
// 		select {
// 		case <-stop:
// 			fmt.Println("Горутина остановлена")
// 			return
// 		default:
// 			fmt.Println("Выполняется работа...")
// 			time.Sleep(1 * time.Second)
// 		}
// 	}
// }

// func main() {
// 	stop := make(chan bool)
// 	go worker(stop)

// 	time.Sleep(3 * time.Second)
// 	fmt.Println("Остановка горутины...")
// 	stop <- true

// 	time.Sleep(1 * time.Second) // Для демонстрации
// }

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

// func worker(ctx context.Context) {
// 	for {
// 		select {
// 		case <-ctx.Done():
// 			fmt.Println("Горутина остановлена")
// 			return
// 		default:
// 			fmt.Println("Выполняется работа...")
// 			time.Sleep(1 * time.Second)
// 		}
// 	}
// }

// func main() {
// 	ctx, cancel := context.WithCancel(context.Background())
// 	go worker(ctx)

// 	time.Sleep(3 * time.Second)
// 	fmt.Println("Отмена работы горутины...")
// 	cancel()

// 	time.Sleep(1 * time.Second) // Для демонстрации
// }

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

// func worker() {
// 	for {
// 		fmt.Println("Выполняется работа...")
// 		time.Sleep(1 * time.Second)
// 	}
// }

// func main() {
// 	sig := make(chan os.Signal, 1)
// 	signal.Notify(sig, syscall.SIGINT, syscall.SIGTERM)

// 	go worker()

// 	<-sig
// 	fmt.Println("Горутина остановлена")
// }

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

// func worker() {
// 	for {
// 		select {
// 		case <-time.After(3 * time.Second):
// 			fmt.Println("Тайм-аут, остановка горутины")
// 			return
// 		default:
// 			fmt.Println("Выполняется работа...")
// 			time.Sleep(1 * time.Second)
// 		}
// 	}
// }

// func main() {
// 	go worker()

// 	// Подождать некоторое время перед завершением программы
// 	time.Sleep(10 * time.Second)
// }

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

// func worker(stop *bool, wg *sync.WaitGroup) {
// 	defer wg.Done()
// 	for !(*stop) {
// 		fmt.Println("Выполняется работа...")
// 		time.Sleep(1 * time.Second)
// 	}
// 	fmt.Println("Горутина остановлена")
// }

// func main() {
// 	stop := false
// 	var wg sync.WaitGroup
// 	wg.Add(1)
// 	go worker(&stop, &wg)

// 	// Подождать некоторое время перед остановкой горутины
// 	time.Sleep(5 * time.Second)
// 	stop = true
// 	wg.Wait()
// }

/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////

// func worker(stop chan bool) {
// 	for {
// 		select {
// 		case <-stop:
// 			fmt.Println("Горутина остановлена")
// 			return
// 		default:
// 			fmt.Println("Выполняется работа...")
// 			time.Sleep(1 * time.Second)
// 		}
// 	}
// }

// func main() {
// 	stop := make(chan bool, 1)
// 	go worker(stop)

// 	// Подождать некоторое время перед остановкой горутины
// 	time.Sleep(5 * time.Second)
// 	stop <- true
// 	close(stop)
// }
